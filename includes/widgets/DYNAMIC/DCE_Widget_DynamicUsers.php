<?php

namespace DynamicContentForElementor\Widgets;

use Elementor\Controls_Manager;
use Elementor\Group_Control_Image_Size;
use Elementor\Repeater;
use Elementor\Scheme_Color;
use Elementor\Scheme_Typography;
use Elementor\Group_Control_Typography;
use Elementor\Group_Control_Border;
use Elementor\Group_Control_Box_Shadow;
use DynamicContentForElementor\DCE_Helper;
use DynamicContentForElementor\Controls\DCE_Group_Control_Filters_CSS;

if (!defined('ABSPATH'))
    exit; // Exit if accessed directly

/**
 * Elements EDC Dynamic Users
 *
 * Single post/page author for Dynamic Content for Elementor.
 *
 */

class DCE_Widget_DynamicUsers extends DCE_Widget_Prototype {

    public function get_name() {
        return 'dyncontel-dynamicusers';
    }

    static public function get_position() {
        return 2;
    }

    static public function is_enabled() {
        return true;
    }

    public function get_title() {
        return __('Dynamic Users', DCE_TEXTDOMAIN);
    }

    public function get_description() {
        return __('Create an archive based on data generated by users', DCE_TEXTDOMAIN);
    }

    public function get_docs() {
        return 'https://www.dynamic.ooo/widget/dynamic-users/';
    }

    public function get_icon() {
        return 'icon-dyn-users';
    }

    public function get_script_depends() {
        return ['imagesloaded', 'isotope'];
    }

    protected function _register_controls() {

        $user_meta = DCE_Helper::get_user_meta();

        $this->start_controls_section(
                'options_users', [
            'label' => __('Options', DCE_TEXTDOMAIN),
                ]
        );
        $this->add_control(
                'single_autor', [
            'label' => __('Single author', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::HEADING,
                ]
        );
        $this->add_control(
                'author_user', [
            'label' => __('Author', DCE_TEXTDOMAIN),
            'description' => 'Select yes for use the author of this page or post.',
            'type' => Controls_Manager::SWITCHER,
                ]
        );
        $this->add_responsive_control(
                'layout_position', [
            'label' => __('Layout', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => '',
            'tablet_default' => '',
            'mobile_default' => '',
            'render_type' => 'template',
            'options' => [
                '' => __('None', DCE_TEXTDOMAIN),
                'top' => __('Top', DCE_TEXTDOMAIN),
                //'bottom' => __( 'Bottom', DCE_TEXTDOMAIN ),
                'left' => __('Left', DCE_TEXTDOMAIN),
                'right' => __('Right', DCE_TEXTDOMAIN),
                'alternate' => __('Alternate', DCE_TEXTDOMAIN),
            ],
            'prefix_class' => 'layout-user%s-position-',
                ]
        );
        $this->add_responsive_control(
                'image_rate', [
            'label' => __('Rate', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 50,
                'unit' => '%',
            ],
            'size_units' => ['px', '%'],
            'range' => [
                '%' => [
                    'min' => 1,
                    'max' => 100,
                ],
                'px' => [
                    'min' => 1,
                    'max' => 600,
                ]
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-user_image' => 'width: {{SIZE}}{{UNIT}};',
                '{{WRAPPER}} .dce-user_content' => 'width: calc( 100% - {{SIZE}}{{UNIT}} );',
            ],
            'condition' => [
                'layout_position' => ['left', 'right', 'alternate'],
            ],
                ]
        );
        $this->add_responsive_control(
                'content_padding', [
            'label' => __('Content Padding', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::DIMENSIONS,
            'size_units' => ['px', '%', 'em'],
            'selectors' => [
                '{{WRAPPER}} .dce-user_content' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
            ],
            'condition' => [
                'layout_position!' => '',
            ]
                ]
        );
        $this->add_control(
                'Filters_heading', [
            'label' => __('Filters Query', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::HEADING,
                ]
        );
        $this->add_control(
                'roles', [
            'label' => __('Roles', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT2,
            'options' => DCE_Helper::get_roles(),
            'multiple' => true,
            //'render_type' => 'template',
            'default' => array()
                ]
        );
        /* $this->add_control(
          'allAcf',
          [
          'label' => __( 'All ACF', DCE_TEXTDOMAIN ),
          'type' => Controls_Manager::SELECT,
          'options' => DCE_Helper::getAll_acf(),
          'multiple' => true,
          //'render_type' => 'template',
          'default' => array()
          ]
          ); */
        $this->add_control(
                'metaFilter', [
            'label' => __('Meta Filter', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'options' => $user_meta,
            'multiple' => true,
            //'render_type' => 'template',
            'default' => 'none'
                ]
        );
        $this->add_control(
                'metaValue_filter', [
            'label' => __('Meta value', DCE_TEXTDOMAIN),
            'description' => __('Il valore che deve avere il filtro', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::TEXT,
            'default' => '',
            'condition' => [
                'metaFilter!' => 'none',
            ],
                ]
        );
        $repeater = new Repeater();

        $repeater->start_controls_tabs('tabs_repeater'); // start tabs ---------------------------------
        $repeater->start_controls_tab('tab_content', ['label' => __('Meta', DCE_TEXTDOMAIN)]);
        //
        $repeater->add_control(
                'meta', [
            'label' => __('Meta', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => 'userlogin',
            'options' => [
                'userlogin' => __('User Login', DCE_TEXTDOMAIN),
                'email' => __('Email', DCE_TEXTDOMAIN),
                'nickname' => __('Nik Name', DCE_TEXTDOMAIN),
                'displayname' => __('Display Name', DCE_TEXTDOMAIN),
                'lastname' => __('Last Name', DCE_TEXTDOMAIN),
                'firstname' => __('First Name', DCE_TEXTDOMAIN),
                'description' => __('Description', DCE_TEXTDOMAIN),
                'avatar' => __('Avatar', DCE_TEXTDOMAIN),
                'website' => __('WebSite', DCE_TEXTDOMAIN),
                'role' => __('Role', DCE_TEXTDOMAIN),
                'custommeta' => __('Custom Meta', DCE_TEXTDOMAIN),
                'ID' => __('ID', DCE_TEXTDOMAIN),
                'attachments' => __('Attachments', DCE_TEXTDOMAIN),
                'articles' => __('Articles', DCE_TEXTDOMAIN),
                'button' => __('Button', DCE_TEXTDOMAIN),
            ],
                ]
        );
        $repeater->add_control(
                'text_before', [
            'label' => __('Text before', DCE_TEXTDOMAIN),
            'description' => __('Text before element', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::TEXT,
            'default' => '',
                ]
        );
        /* $repeater->add_control(
          'meta_key', [
          'label' => __('Meta key', DCE_TEXTDOMAIN),
          'description' => __('La chiave del campo personalizzato', DCE_TEXTDOMAIN),
          'type' => Controls_Manager::TEXT,
          'default' => '',
          'condition' => [
          'meta' => 'custommeta',
          ],
          ]
          ); */
        $repeater->add_control(
                'meta_key', [
            'label' => __('All Meta', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT2,
            'multiple' => false,
            'options' => $user_meta,
            'description' => __('Select the Custom Field', DCE_TEXTDOMAIN),
            //'render_type' => 'template',
            'condition' => [
                'meta' => 'custommeta',
            ],
                ]
        );
        $repeater->add_control(
                'article_post_type', [
            'label' => __('Article Post Type', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT2,
            'options' => DCE_Helper::get_post_types(),
            'multiple' => true,
            'label_block' => true,
            'default' => 'post',
            'condition' => [
                'meta' => 'articles',
            ],
                ]
        );

        $repeater->add_control(
                'attachment_url', [
            'label' => __('Attachment URL', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta' => 'attachments',
            ],
                ]
        );
        $repeater->add_control(
                'articles_url', [
            'label' => __('Articles URL', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta' => 'articles',
            ],
                ]
        );
        $repeater->add_control(
                'link_to_page', [
            'label' => __('Link to page', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta!' => ['attachments', 'articles'],
            ],
                ]
        );
        $repeater->add_control(
                'link_to', [
            'label' => __('Link to', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => 'user_page',
            'options' => [
                'user_page' => __('User page', DCE_TEXTDOMAIN),
                'other_url' => __('Meta URL', DCE_TEXTDOMAIN),
                'custom' => __('Custom URL', DCE_TEXTDOMAIN),
            ],
            'condition' => [
                'link_to_page' => 'yes',
                'meta!' => ['attachments', 'articles']
            ]
                ]
        );
        $repeater->add_control(
                'custom_link', [
            'label' => __('Link url', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::URL,
            'placeholder' => __('http://your-link.com', DCE_TEXTDOMAIN),
            'condition' => [
                'link_to' => 'custom',
            ],
            'default' => [
                'url' => '',
            ],
            'show_label' => false,
                ]
        );


        $user_meta_url = DCE_Helper::get_acf_field_urlfile();
        /* foreach ($user_meta as $akey => $avalue) {
          $url = get_user_meta($user_id, $avalue, true); // non ho l'id utente e i campi nn sono ancora valorizzati...
          if (filter_var($url, FILTER_VALIDATE_URL)) {
          $user_meta_url[$avalue] = $url;
          }
          } */

        $repeater->add_control(
                'meta_field_url', [
            'label' => __('Meta Field Url', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'options' => $user_meta_url,
            'default' => 'Select the Field',
            'condition' => [
                //'acf_type' => ['url', 'file'],
                'link_to_page' => 'yes',
                'link_to' => 'other_url',
                'meta!' => ['attachments', 'articles']
            ]
                ]
        );
        $repeater->add_control(
                'meta_field_url_target_blank', [
            'label' => __('Target blank', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'link_to_page' => 'yes',
                'link_to' => 'other_url',
                'meta!' => ['attachments', 'articles'],
                'meta_field_url!' => ''
            ]
                ]
        );
        $repeater->add_control(
                'inline_item', [
            'label' => __('Inline', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta!' => ['attachments', 'articles']
            ]
                ]
        );
        $repeater->add_control(
                'hide_item', [
            'label' => __('Hide item', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SWITCHER,
            'condition' => [
                'meta!' => ['attachments', 'articles', 'button']
            ]
                ]
        );
        $repeater->end_controls_tab();
        $repeater->start_controls_tab('tab_style', ['label' => __('Style', DCE_TEXTDOMAIN)]);
        //
        $repeater->add_control(
                'padding_item', [
            'label' => __('Padding', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::DIMENSIONS,
            'size_units' => ['px', '%'],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
            ],
                ]
        );
        $repeater->add_control(
                'color_item', [
            'label' => __('Text color', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}.tx-el, {{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}.tx-el a' => 'color: {{VALUE}};',
            ],
            'condition' => [
                'meta!' => ['attachments', 'articles', 'avatar']
            ],
                ]
        );
        $repeater->add_control(
                'hover_color_item', [
            'label' => __('Hover color', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}.tx-el:hover a' => 'color: {{VALUE}};',
            ],
            'condition' => [
                'meta!' => ['attachments', 'articles', 'avatar'],
                'link_to_page' => 'yes',
            ],
                ]
        );
        $repeater->add_control(
                'bgcolor_item', [
            'label' => __('Background color', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}' => 'background-color: {{VALUE}};',
            ],
            'condition' => [
                'meta!' => ['attachments', 'articles', 'avatar']
            ],
                ]
        );
        $repeater->add_control(
                'hover_bgcolor_item', [
            'label' => __('Background hover color', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}:hover' => 'background-color: {{VALUE}};',
            ],
            'condition' => [
                'meta!' => ['attachments', 'articles', 'avatar']
            ],
                ]
        );
        $repeater->add_group_control(
                Group_Control_Typography::get_type(), [
            'name' => 'typography_item',
            'label' => 'Typography item',
            'scheme' => Scheme_Typography::TYPOGRAPHY_1,
            'selector' => '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}}.tx-el',
            'condition' => [
                'meta!' => ['attachments', 'avatar']
            ],
                ]
        );
        // --------------------------- Attachments
        $repeater->add_control(
                'hr_1', [
            'type' => \Elementor\Controls_Manager::DIVIDER,
            'style' => 'thick',
            'condition' => [
                'meta' => 'attachments',
            ],
                ]
        );
        $repeater->add_responsive_control(
                'columns_grid_attachments', [
            'label' => __('Columns', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => '5',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                '1' => '1',
                '2' => '2',
                '3' => '3',
                '4' => '4',
                '5' => '5',
                '6' => '6',
                '7' => '7',
                '8' => '8',
                '9' => '9',
                '10' => '10'
            ],
            //'frontend_available' => true,
            //'prefix_class' => 'columns-',
            'render_type' => 'template',
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .item_attach' => 'flex: 0 1 calc( 100% / {{VALUE}} );',
            ],
            'condition' => [
                'meta' => 'attachments'
            ],
                ]
        );
        $repeater->add_control(
                'flex_grow_attachments', [
            'label' => __('Flex grow', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                '1' => [
                    'title' => __('1', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-check',
                ],
                '0' => [
                    'title' => __('0', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-ban',
                ]
            ],
            'default' => 1,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .item_attach' => 'flex-grow: {{VALUE}};',
            ],
            'condition' => [
                'meta' => 'attachments'
            ],
                ]
        );
        $repeater->add_responsive_control(
                'flexgrid_mode_attachments', [
            'label' => __('Alignment grid', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => 'flex-start',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                'flex-start' => 'Flex start',
                'flex-end' => 'Flex end',
                'center' => 'Center',
                'space-between' => 'Space Between',
                'space-around' => 'Space Around',
            ],
            //'frontend_available' => true,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .grid-attach' => 'justify-content: {{VALUE}};',
            ],
            'condition' => [
                'meta' => 'attachments'
            ],
                ]
        );
        $repeater->add_group_control(
                Group_Control_Image_Size::get_type(), [
            'name' => 'size_attachment',
            'label' => __('Image Size', DCE_TEXTDOMAIN),
            'default' => 'thumbnail',
            'condition' => [
                'meta' => 'attachments'
            ],
                ]
        );
        // --------------------------- Articles
        $repeater->add_control(
                'hr_2', [
            'type' => \Elementor\Controls_Manager::DIVIDER,
            'style' => 'thick',
            'condition' => [
                'meta' => 'articles',
            ],
                ]
        );
        $repeater->add_responsive_control(
                'columns_grid_articles', [
            'label' => __('Columns', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => '5',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                '1' => '1',
                '2' => '2',
                '3' => '3',
                '4' => '4',
                '5' => '5',
                '6' => '6',
                '7' => '7',
                '8' => '8',
                '9' => '9',
                '10' => '10'
            ],
            //'frontend_available' => true,
            //'prefix_class' => 'columns-',
            'render_type' => 'template',
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .item_article' => 'flex: 0 1 calc( 100% / {{VALUE}} );',
            ],
            'condition' => [
                'meta' => 'articles'
            ],
                ]
        );
        $repeater->add_control(
                'flex_grow_articles', [
            'label' => __('Flex grow', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                '1' => [
                    'title' => __('1', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-check',
                ],
                '0' => [
                    'title' => __('0', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-ban',
                ]
            ],
            'default' => 1,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .item_article' => 'flex-grow: {{VALUE}};',
            ],
            'condition' => [
                'meta' => 'articles'
            ],
                ]
        );
        $repeater->add_responsive_control(
                'flexgrid_mode_articles', [
            'label' => __('Alignment grid', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => 'flex-start',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                'flex-start' => 'Flex start',
                'flex-end' => 'Flex end',
                'center' => 'Center',
                'space-between' => 'Space Between',
                'space-around' => 'Space Around',
            ],
            //'frontend_available' => true,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .grid-articles' => 'justify-content: {{VALUE}};',
            ],
            'condition' => [
                'meta' => 'articles'
            ],
                ]
        );
        $repeater->add_group_control(
                Group_Control_Image_Size::get_type(), [
            'name' => 'size_articles',
            'label' => __('Image Size', DCE_TEXTDOMAIN),
            'default' => 'thumbnail',
            'condition' => [
                'meta' => 'articles'
            ],
                ]
        );
        // --------------------------- Text Before
        $repeater->add_control(
                'hr_3', [
            'type' => \Elementor\Controls_Manager::DIVIDER,
            'style' => 'thick',
            'condition' => [
                'text_before!' => '',
            ],
                ]
        );
        $repeater->add_control(
                'txbefore_heading', [
            'label' => __('Text Before', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::HEADING,
            'separator' => 'before',
            'condition' => [
                'text_before!' => '',
            ],
                ]
        );
        $repeater->add_control(
                'color_txbefore', [
            'label' => __('Text before Color', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}} .tx-before' => 'color: {{VALUE}};',
                '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}} a .tx-before' => 'color: {{VALUE}};',
            ],
            'condition' => [
                'text_before!' => '',
            ],
                ]
        );
        $repeater->add_group_control(
                Group_Control_Typography::get_type(), [
            'name' => 'typography_txbefore',
            'label' => 'Typography text before',
            'scheme' => Scheme_Typography::TYPOGRAPHY_1,
            'selector' => '{{WRAPPER}} .dce-grid-users {{CURRENT_ITEM}} .tx-before',
            'popover' => true,
            'condition' => [
                'text_before!' => '',
            ],
                ]
        );




        $repeater->end_controls_tab();
        $repeater->end_controls_tabs(); // end tabs ----------------------------------------------------

        $this->add_control(
                'user_meta_items', [
            'label' => __('User Meta Items', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::REPEATER,
            'default' => [
                [
                    'meta' => 'avatar',
                ],
                [
                    'meta' => 'userlogin',
                ],
                [
                    'meta' => 'email',
                ],
                [
                    'meta' => 'nickname',
                ]
            ],
            'fields' => array_values($repeater->get_controls()),
            'title_field' => 'Item',
            'title_field' => '{{{ meta }}}',
                ]
        );







        $this->end_controls_section();

        //////////////////////////////////////////////////////////////////////////// [ SECTION Avatar ]
        $this->start_controls_section(
                'section_avatar', [
            'label' => __('Avatar', DCE_TEXTDOMAIN),
            'tab' => Controls_Manager::TAB_CONTENT,
                ]
        );
        $this->add_control(
                'avatar_size', [
            'label' => __('Avatar Size', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 80,
            ],
            'range' => [
                'px' => [
                    'min' => 10,
                    'max' => 1200,
                    'step' => 1,
                ],
            ],
            'size_units' => ['px', '%'],
                ]
        );
        $this->add_group_control(
                Group_Control_Border::get_type(), [
            'name' => 'border_avatar',
            'label' => __('Border', DCE_TEXTDOMAIN),
            'selector' => '{{WRAPPER}} .dce-item-user .user-avatar img',
                ]
        );

        $this->add_responsive_control(
                'border_radius_avatar', [
            'label' => __('Border Radius', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::DIMENSIONS,
            'size_units' => ['px', '%'],
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .user-avatar, {{WRAPPER}} .dce-item-user .user-avatar img, {{WRAPPER}} .dce-overlay_hover, {{WRAPPER}} .dce-overlay' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
            ],
                ]
        );
        $this->add_control(
                'padding_avatar', [
            'label' => __('Padding', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::DIMENSIONS,
            'size_units' => ['px', '%'],
            'selectors' => [
                '{{WRAPPER}} .dce-item-user .user-avatar, {{WRAPPER}} .dce-overlay_hover, {{WRAPPER}} .dce-overlay' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
            ],
                ]
        );
        $this->add_group_control(
                Group_Control_Box_Shadow::get_type(), [
            'name' => 'box_shadow_avatar',
            'selector' => '{{WRAPPER}} .dce-item-user .user-avatar',
                ]
        );
        $this->add_group_control(
                DCE_Group_Control_Filters_CSS::get_type(), [
            'name' => 'filters_avatar',
            'label' => 'Filters',
            //'selector' => '{{WRAPPER}} img, {{WRAPPER}} .dynamic-content-featuredimage-bg',
            'selector' => '{{WRAPPER}} .dce-item-user .user-avatar',
                ]
        );
        $this->end_controls_section();
        //////////////////////////////////////////////////////////////////////////// [ SECTION Grid ]
        $this->start_controls_section(
                'section_grid', [
            'label' => __('Grid style', DCE_TEXTDOMAIN),
            'tab' => Controls_Manager::TAB_CONTENT,
                ]
        );
        $this->add_control(
                'posts_style', [
            'label' => __('Style', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => 'flexgrid',
            'frontend_available' => true,
            'options' => [
                'simplegrid' => __('Row', DCE_TEXTDOMAIN),
                'flexgrid' => __('Flex Grid', DCE_TEXTDOMAIN),
                'grid' => __('Grid Masonry', DCE_TEXTDOMAIN),
            ]
                ]
        );
        $this->add_responsive_control(
                'columns_grid_flex', [
            'label' => __('Columns', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => '5',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                '1' => '1',
                '2' => '2',
                '3' => '3',
                '4' => '4',
                '5' => '5',
                '6' => '6',
                '7' => '7'
            ],
            //'frontend_available' => true,
            //'prefix_class' => 'columns-',
            'render_type' => 'template',
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users.flexgrid .dce-item-user' => 'flex: 0 1 calc( 100% / {{VALUE}} );',
                '{{WRAPPER}} .dce-grid-users.grid .dce-item-user' => 'width: calc( 100% / {{VALUE}} );'
            ],
            'condition' => [
                'posts_style' => ['grid', 'flexgrid'],
            ],
                ]
        );
        /*
          flex-grow: 0;
          flex-shrink: 1;
          flex-basis: calc(33.3333%)
         */

        $this->add_control(
                'flex_grow', [
            'label' => __('Flex grow', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                '1' => [
                    'title' => __('1', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-check',
                ],
                '0' => [
                    'title' => __('0', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-ban',
                ]
            ],
            'default' => 0,
            'selectors' => [
                '{{WRAPPER}} .dce-item-user' => 'flex-grow: {{VALUE}};',
            ],
            'condition' => [
                'posts_style' => 'flexgrid',
            ],
                ]
        );
        $this->add_responsive_control(
                'flexgrid_mode', [
            'label' => __('Alignment grid', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'default' => 'flex-start',
            'tablet_default' => '3',
            'mobile_default' => '1',
            'options' => [
                'flex-start' => 'Flex start',
                'flex-end' => 'Flex end',
                'center' => 'Center',
                'space-between' => 'Space Between',
                'space-around' => 'Space Around',
            ],
            //'frontend_available' => true,
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users' => 'justify-content: {{VALUE}};',
            ],
            'condition' => [
                'posts_style' => 'flexgrid',
                'flex_grow' => '0'
            ],
                ]
        );
        $this->add_control(
                'filters_enable', [
            'label' => __('Show Filters', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SWITCHER,
            'frontend_available' => true,
            'condition' => [
                'posts_style' => 'grid',
            ],
                ]
        );
        $this->add_responsive_control(
                'grid_space', [
            'label' => __('Column Space', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 15,
                'unit' => 'px',
            ],
            'tablet_default' => [
                'unit' => 'px',
            ],
            'mobile_default' => [
                'unit' => 'px',
            ],
            'size_units' => ['px', 'rem'],
            'range' => [
                'rem' => [
                    'min' => 0,
                    'max' => 10,
                ],
                'px' => [
                    'min' => 0,
                    'max' => 100,
                ]
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-item-user' => 'padding-left: {{SIZE}}{{UNIT}}; padding-right: {{SIZE}}{{UNIT}};',
            ]
                ]
        );
        $this->add_responsive_control(
                'row_grid_space', [
            'label' => __('Row Space', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 15,
                'unit' => 'px',
            ],
            'tablet_default' => [
                'unit' => 'px',
            ],
            'mobile_default' => [
                'unit' => 'px',
            ],
            'size_units' => ['px', 'rem'],
            'range' => [
                'rem' => [
                    'min' => 0,
                    'max' => 10,
                ],
                'px' => [
                    'min' => 0,
                    'max' => 100,
                ]
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-item-user' => 'padding-bottom: {{SIZE}}{{UNIT}};',
            ]
                ]
        );
        $this->add_responsive_control(
                'layout_align', [
            'label' => __('Alignment', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                'none' => [
                    'title' => __('None', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-close',
                ],
                'left' => [
                    'title' => __('Left', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-align-left',
                ],
                'center' => [
                    'title' => __('Center', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-align-center',
                ],
                'right' => [
                    'title' => __('Right', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-align-right',
                ]
            ],
            'default' => 'left',
            'selectors' => [
                '{{WRAPPER}} .dce-grid-users' => 'text-align: {{VALUE}};',
            ],
                //'prefix_class' => 'acfposts-align-'
                ]
        );
        $this->end_controls_section();

        // ------------------------------------------------------------------------------------ [ SECTION Filters ]

        $this->start_controls_section(
                'section_filters', [
            'label' => __('Filters', DCE_TEXTDOMAIN),
            'tab' => Controls_Manager::TAB_CONTENT,
            'condition' => [
                'filters_enable' => 'yes',
            ],
                ]
        );
        $this->add_control(
                'filters_meta', [
            'label' => __('Filters Meta', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SELECT,
            'options' => $user_meta,
            'multiple' => true,
            //'render_type' => 'template',
            'default' => 'none'
                ]
        );
        /* $this->add_control(
          'filters_taxonomy', [
          'label' => __('Data Filters (Taxonomy)', DCE_TEXTDOMAIN),
          'type' => Controls_Manager::SELECT,
          //'options' => get_post_taxonomies( $post->ID ),
          'options' => [ '' => __('None', DCE_TEXTDOMAIN)] + get_taxonomies(array('public' => true)),
          'default' => 'category',
          'condition' => [
          'filters_enable' => 'yes',
          ],
          ]
          );
          $this->add_control(
          'filters_acf', [
          'label' => __('Data Filters (ACF)', DCE_TEXTDOMAIN),
          'type' => Controls_Manager::SELECT,
          //'options' => get_post_taxonomies( $post->ID ),
          'options' => $this->get_acf_field(),
          'default' => '0',
          'condition' => [
          'filters_enable' => 'yes',
          ],
          ]
          ); */
        $this->add_control(
                'separator_filter', [
            'label' => __('Separator', DCE_TEXTDOMAIN),
            //'description' => __('Separator caracters.',DCE_TEXTDOMAIN),
            'type' => Controls_Manager::TEXT,
            'default' => ' / ',
            'condition' => [
                'filters_enable' => 'yes',
            ],
                ]
        );
        $this->add_responsive_control(
                'filters_align', [
            'label' => __('Filters Alignment', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::CHOOSE,
            'options' => [
                'left' => [
                    'title' => __('Left', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-align-left',
                ],
                'center' => [
                    'title' => __('Center', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-align-center',
                ],
                'right' => [
                    'title' => __('Right', DCE_TEXTDOMAIN),
                    'icon' => 'fa fa-align-right',
                ]
            ],
            'default' => 'left',
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters' => 'text-align: {{VALUE}};',
            ],
            'condition' => [
                'filters_enable' => 'yes',
            ],
                //'prefix_class' => 'acfposts-align-'
                ]
        );
        // ------------------------------------------------- [ section Style - Filters ] users-filters-item dce-users-filters
        $this->add_control(
                'filters_color', [
            'label' => __('Filters Color', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .users-filters-item a' => 'color: {{VALUE}};',
            ],
                ]
        );
        $this->add_control(
                'filters_color_hover', [
            'label' => __('Filters Color Hover', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .users-filters-item a:hover' => 'color: {{VALUE}};',
            ],
                ]
        );
        $this->add_control(
                'filters_color_active', [
            'label' => __('Filters Color Active', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'default' => '#990000',
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .users-filters-item.filter-active a' => 'color: {{VALUE}};',
            ],
                ]
        );
        $this->add_control(
                'filters_color_divisore', [
            'label' => __('Divider Filters Color', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::COLOR,
            'scheme' => [
                'type' => Scheme_Color::get_type(),
                'value' => Scheme_Color::COLOR_1,
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .filters-divider' => 'color: {{VALUE}};',
            ],
                ]
        );
        $this->add_group_control(
                Group_Control_Typography::get_type(), [
            'name' => 'typography_filters',
            'label' => __('Typography Filters', DCE_TEXTDOMAIN),
            'selector' => '{{WRAPPER}} .dce-users-filters',
                ]
        );
        $this->add_group_control(
                Group_Control_Typography::get_type(), [
            'name' => 'typography_filters_divider',
            'label' => __('Typography Divider', DCE_TEXTDOMAIN),
            'scheme' => Scheme_Typography::TYPOGRAPHY_2,
            'selector' => '{{WRAPPER}} .dce-users-filters .filters-divider',
                ]
        );
        $this->add_responsive_control(
                'filters_padding_items', [
            'label' => __('Spazio tra i filtri', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 5,
                'unit' => 'px',
            ],
            'tablet_default' => [
                'unit' => 'px',
            ],
            'mobile_default' => [
                'unit' => 'px',
            ],
            'size_units' => ['px', '%'],
            'range' => [
                '%' => [
                    'min' => 0,
                    'max' => 100,
                ],
                'px' => [
                    'min' => 0,
                    'max' => 100,
                ]
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .filters-divider' => 'padding-left: {{SIZE}}{{UNIT}}; padding-right: {{SIZE}}{{UNIT}};',
            ],
                ]
        );
        $this->add_control(
                'filters_padding', [
            'label' => __('Padding', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::DIMENSIONS,
            'size_units' => ['px', '%'],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
            ],
                /* 'condition' => [
                  'gallery_display_caption' => '',
                  ], */
                ]
        );
        $this->add_responsive_control(
                'filters_move_divider', [
            'label' => __('Vertical Shift Divider', DCE_TEXTDOMAIN),
            'type' => Controls_Manager::SLIDER,
            'default' => [
                'size' => 0,
                'unit' => 'px',
            ],
            'tablet_default' => [
                'unit' => 'px',
            ],
            'mobile_default' => [
                'unit' => 'px',
            ],
            'size_units' => ['px', '%'],
            'range' => [
                '%' => [
                    'min' => -100,
                    'max' => 100,
                ],
                'px' => [
                    'min' => -100,
                    'max' => 100,
                ]
            ],
            'selectors' => [
                '{{WRAPPER}} .dce-users-filters .filters-divider' => 'top: {{SIZE}}{{UNIT}}; position: relative;',
            ],
                ]
        );
        $this->end_controls_section();
    }

    protected function render() {
        $settings = $this->get_settings_for_display();
        if (empty($settings))
            return;

        ///////////////////////////////////////////////////////////// Filters /////////////////////////////////////////
        if ($settings['filters_enable'] && $settings['posts_style'] == 'grid') {
            $tag_filter = 'span';
            $divisore_f = '';

            // recupero la lista degli elementi che appartengono a un determinato user_meta.
            $list_filters = array();
            // il meta: $settings['filters_meta']
            /* $args = array(
              'fields' => array( 'ID' ),
              'meta_key' => $settings['filters_meta'],
              //'meta_value' => $_GET['th_struttura']
              ); */
            $users = get_users(/* $args */);
            $list_isotope_filters = [];
            foreach ($users as $user) {
                $valore_meta = get_user_meta($user->ID, $settings['filters_meta'], true);
                if ($valore_meta != '') {
                    $list_isotope_filters[$valore_meta] = $user->{$settings['filters_meta']};
                }
            }
            //array_unique($user_ids);
            //var_dump($list_isotope_filters);

            echo '<div class="dce-users-filters">';
            $cont_f = 1;
            if (!empty($list_isotope_filters)) {

                echo '<' . $tag_filter . ' class="users-filters-item filter-active">' . $divisore_f . '<a href="#" data-filter="*">' . __('All', DCE_TEXTDOMAIN) . '</a></' . $tag_filter . '>';
                foreach ($list_isotope_filters as $filter) {
                    // L'etichetta del filtro
                    $filternome = $filter;

                    // Lo slug del filtro
                    $filterslug = sanitize_title($filter); // poi dovrò convertire in stringa semplificata da trattini e minuscole

                    /* if( $cont_f > 1) */ $divisore_f = '<span class="filters-divider">' . $settings['separator_filter'] . '</span>';
                    if ($filternome != "")
                        echo '<' . $tag_filter . ' class="users-filters-item">' . $divisore_f . '<a href="#" data-filter=".' . $filterslug . '">' . $filternome . '</a></' . $tag_filter . '>';
                    $cont_f++;
                }
            }
            echo '</div>';
        }

        $styleClass = '';
        // ------- Simple Grid--------------------------------------------------
        if ($settings['posts_style'] == 'simplegrid') {
            $styleClass = ' simplegrid';
        } else
        // ------- Flex Grid --------------------------------------------------
        if ($settings['posts_style'] == 'flexgrid') {
            $styleClass = ' flexgrid';
        } else
        // ------- Grid data --------------------------------------------------
        if ($settings['posts_style'] == 'grid') {
            $styleClass = ' grid';
        }
        ///////////////////////////////////////////////////////////// Grid Users /////////////////////////////////////////
        if ($settings['metaFilter'] == 'none')
            $settings['metaFilter'] = array();
        $userargs = array(
            'blog_id' => $GLOBALS['blog_id'],
            'role' => '',
            'role__in' => $settings['roles'],
            'role__not_in' => array(),
            'meta_key' => $settings['metaFilter'],
            'meta_value' => $settings['metaValue_filter'],
            'meta_compare' => '',
            'meta_query' => array(),
            'date_query' => array(),
            'include' => array(),
            'exclude' => array(),
            'orderby' => 'login',
            'order' => 'ASC',
            'offset' => '',
            'search' => '',
            'number' => '',
            'count_total' => false,
            'fields' => 'all', //array( 'ID' )
            'who' => '',
        );

        if ($settings['author_user'] == 'yes') {
            $author = get_the_author_meta('ID');

            $userargs['include'] = array($author);
            //echo 'cosa??'.$author;
        }
        $users = get_users($userargs);
        echo '<div class="dce-grid-users' . $styleClass . '">';
        foreach ($users as $user) {


            //print_r(get_user_meta ( $user->ID));
            /* echo '<div>ID: ' . esc_html( $user->ID ) . '</div>';
              echo '<div>NiceName: ' . esc_html( $user->nickname ) . '</div>';
              echo '<div>Nome: ' . esc_html( $user->first_name ) . '</div>';
              echo '<div>Cognome: ' . esc_html( $user->last_name ) . '</div>';
              echo '<div>Bio: ' . esc_html( $user->description ) . '</div>';
              echo '<div>Email: ' . esc_html( $user->user_email ) . '</div>';
              echo '<div>Website: ' . esc_html( $user->user_url ) . '</div>';
              echo '<div>Username: ' . esc_html( $user->user_login ) . '</div>';
              echo '<div>Avatar: ' . get_avatar( $user->user_email, 100 ) . '</div>';
              echo '<div>DisplayName: ' . esc_html( $user->display_name ) . '</div>';
              echo '<div>ACF Altezza: ' . esc_html( $user->altezza ) . '</div>';
              echo '<div>Ruolo: ' . esc_html( $user->roles[0] ) . '</div>';
              echo get_avatar_url( $user->user_email ); */
            //
            $user_meta_items = $settings['user_meta_items'];
            if (!empty($user_meta_items)) {

                // -------------------------------------------- 
                // 0 - se i filtri sono abilitati
                $filters_string_class = "";
                if ($settings['filters_enable']) {
                    $filters_string_class = $user->{$settings['filters_meta']};
                    $filters_string_class = ' ' . sanitize_title($filters_string_class);
                    //echo $filters_string_class;
                } // end if filters_enable

                echo '<div class="dce-item-user' . $filters_string_class . '">';
                if ($settings['layout_position']) {
                    echo '<div class="dce-user_image">';
                    foreach ($settings['user_meta_items'] as $item) {
                        $classElItem = ' elementor-repeater-item-' . $item['_id'];

                        $openLink = $this->get_link_a($item, $user);
                        $closeLink = ($openLink) ? '</a>' : ''; // end il LINK

                        if ($item['meta'] == 'avatar')
                            echo '<div class="user-avatar' . $classElItem . '">' . $openLink . get_avatar($user->user_email, $settings['avatar_size']['size']) . $closeLink . '</div>';
                    }
                    echo '</div>';
                }
                echo '<div class="dce-user_content">';

                foreach ($settings['user_meta_items'] as $item) {

                    $classElItem = ' elementor-repeater-item-' . $item['_id'];

                    $inlineItem = '';
                    if ($item['inline_item'] == 'yes') {
                        $inlineItem = ' inline-useritem';
                        $classElItem .= $inlineItem;
                    }
                    $textBefore = '';
                    if ($item['text_before'] != '') {
                        $textBefore = '<span class="tx-before">' . __($item['text_before'], DCE_TEXTDOMAIN) . '</span>';
                    }

                    $openLink = $this->get_link_a($item, $user);
                    $closeLink = ($openLink) ? '</a>' : ''; // end il LINK

                    $show_item = true;
                    if ($item['hide_item']) {
                        $show_item = false;
                    }

                    //echo '<dt class="repeater-' . $item['_id'] . '">' .  $item['meta'] . '</dt>';
                    $user_data_view = '';
                    if ($item['meta'] == 'ID' && $show_item) {
                        $user_data_view = $user->ID;
                    } else if ($item['meta'] == 'userlogin' && $show_item) {
                        $user_data_view = $user->user_login;
                    } else if ($item['meta'] == 'nickname' && $show_item) {
                        $user_data_view = $user->nickname;
                    } else if ($item['meta'] == 'displayname' && $show_item) {
                        $user_data_view = $user->display_name;
                    } else if ($item['meta'] == 'firstname' && $show_item) {
                        $user_data_view = $user->first_name;
                    } else if ($item['meta'] == 'lastname' && $show_item) {
                        $user_data_view = $user->last_name;
                    } else if ($item['meta'] == 'description' && $show_item) {
                        $user_data_view = $user->description;
                    } else if ($item['meta'] == 'email' && $show_item) {
                        $user_data_view = $user->user_email;
                    } else if ($item['meta'] == 'website' && $show_item) {
                        $user_data_view = $user->url;
                    } else if ($item['meta'] == 'avatar' && $show_item) {
                        $user_data_view = get_avatar($user->user_email, $settings['avatar_size']['size']);
                    } else if ($item['meta'] == 'role' && $show_item) {
                        $user_data_view = $user->roles[0];
                    } else if ($item['meta'] == 'custommeta' && $show_item) {
                        $user_data_view = $item['meta_key'];
                    }

                    //echo '.... '.$user_data_view;
                    /* if( $item['link_to'] != '' && empty($urlToPage) && !$show_item ){
                      return;
                      } */

                    //echo '<dt class="repeater-' . $item['_id'] . '">' .  $item['meta'] . '</dt>';
                    if ($item['meta'] == 'ID')
                        echo '<div class="user-id tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';
                    else if ($item['meta'] == 'userlogin')
                        echo '<div class="user-userlogin tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                    else if ($item['meta'] == 'nickname' && !empty($user_data_view))
                        echo '<div class="user-nickname tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';
                    else if ($item['meta'] == 'displayname' && !empty($user_data_view))
                        echo '<div class="user-displayname tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                    else if ($item['meta'] == 'firstname' && !empty($user_data_view))
                        echo '<div class="user-firstname tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';
                    else if ($item['meta'] == 'lastname' && !empty($user_data_view))
                        echo '<div class="user-lastname tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                    else if ($item['meta'] == 'description' && !empty($user_data_view))
                        echo '<div class="user-description tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $openLink . '</div>';
                    else if ($item['meta'] == 'email')
                        echo '<div class="user-email tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                    else if ($item['meta'] == 'website' && !empty($user_data_view))
                        echo '<div class="user-website tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $closeLink . '</div>';

                    else if ($item['meta'] == 'avatar' && $settings['layout_position'] == '')
                        echo '<div class="user-avatar' . $classElItem . '">' . $openLink . $textBefore . $user_data_view . $closeLink . '</div>';

                    else if ($item['meta'] == 'role')
                        echo '<div class="user-role tx-el' . $classElItem . '">' . $openLink . $textBefore . esc_html($user_data_view) . $$closeLink . '</div>';

                    else if ($item['meta'] == 'button')
                        echo '<div class="user-button tx-el' . $classElItem . '">' . $openLink . $textBefore . $closeLink . '</div>';

                    else if ($item['meta'] == 'custommeta') {

                        $metak = $item['meta_key'];
                        if (!empty($metak)) {
                            echo '<div class="user-custommeta tx-el' . $classElItem . '">' . $openLink . $textBefore;
                            if (!empty($user_data_view))
                                //$user->{$user_data_view};
                                the_field($metak, 'user_'.$user->ID);
                            echo $closeLink . '</div>';
                        }
                    }
                    //esc_html( $user->str_split($item['meta_key']) )



                    else if ($item['meta'] == 'attachments') {
                        $user_ids_att = array();
                        $user_ids_att[] = $user->ID;
                        //
                        echo '<div class="user-attachments' . $classElItem . '">';
                        $att = $this->get_attachments($textBefore, $user_ids_att, $item['size_attachment_size'], $item['attachment_url']);
                        echo '</div>';
                    } else if ($item['meta'] == 'articles') {
                        $user_ids_att = array();
                        $user_ids_att[] = $user->ID;
                        echo '<div class="user-articles' . $classElItem . '">';
                        $att = $this->get_articles($textBefore, $user_ids_att, $item['size_articles_size'], $item['article_post_type'], $item['articles_url']);
                        echo '</div>';
                    }
                }
                echo '</div>'; // end content
                echo '</div>'; // end item
            }
        }
        echo '</div>';
    }

    protected function _content_template() {
        
    }

    protected function user_fields_labels() {

        $fields = [
            'first_name' => __('First Name', DCE_TEXTDOMAIN),
            'last_name' => __('Last Name', DCE_TEXTDOMAIN),
            'first_last' => __('First Name + Last Name', DCE_TEXTDOMAIN),
            'last_first' => __('Last Name + First Name', DCE_TEXTDOMAIN),
            'nickname' => __('Nick Name', DCE_TEXTDOMAIN),
            'display_name' => __('Display Name', DCE_TEXTDOMAIN),
            'user_login' => __('User Name', DCE_TEXTDOMAIN),
            'description' => __('User Bio', DCE_TEXTDOMAIN),
            'image' => __('User Image', DCE_TEXTDOMAIN),
        ];

        return $fields;
    }

    protected function user_data($selected = '') {

        global $post;

        $author_id = $post->post_author;

        $fields = [
            'first_name' => get_the_author_meta('first_name', $author_id),
            'last_name' => get_the_author_meta('last_name', $author_id),
            'first_last' => sprintf('%s %s', get_the_author_meta('first_name', $author_id), get_the_author_meta('last_name', $author_id)),
            'last_first' => sprintf('%s %s', get_the_author_meta('last_name', $author_id), get_the_author_meta('first_name', $author_id)),
            'nickname' => get_the_author_meta('nickname', $author_id),
            'display_name' => get_the_author_meta('display_name', $author_id),
            'user_login' => get_the_author_meta('user_login', $author_id),
            'description' => get_the_author_meta('description', $author_id),
            'image' => get_avatar(get_the_author_meta('email', $author_id), 256),
        ];

        if (empty($selected)) {
            // Return the entire array
            return $fields;
        } else {
            // Return only the selected field
            return $fields[$selected];
        }
    }

    protected function get_attachments($tx_before, $users, $size_attach, $is_attachment_url) {
        //var_dump($users);
        $acfList = [];
        $tipo = 'attachment';
        $get_attachments = get_posts(
                array(
                    'author__in' => $users,
                    'post_type' => $tipo,
                    'numberposts' => -1,
                    'post_status' => 'any',
                    'orderby' => 'title'
                )
        );
        //echo $tipo;
        //var_dump($users);
        echo '<div class="grid-attach">';
        //echo $size_attach;
        if (!empty($get_attachments)) {
            echo $tx_before;
            foreach ($get_attachments as $media) {
                //echo '<br>'.$media->ID;
                //echo $is_attachment_url;
                echo '<div class="item_attach">';
                if ($is_attachment_url == 'yes')
                    echo '<a href="' . get_permalink($media->ID) . '">';
                echo wp_get_attachment_image($media->ID, $size_attach);
                if ($is_attachment_url == 'yes')
                    echo '</a>';
                echo '</div>';
                //echo apply_filters( 'the_title', $media->post_title );
            }
        }
        echo '</div>';
        //return $get_attachments;
    }

    protected function get_articles($tx_before, $users, $size_art, $type_art, $is_article_url) {
        //var_dump($users);
        $acfList = [];
        $tipo = $type_art;
        //var_dump($tipo);
        //echo $item['article_post_type'];
        $get_articles = get_posts(
                array(
                    'author__in' => $users,
                    'post_type' => $tipo,
                    'numberposts' => -1,
                    'post_status' => 'any',
                    'public' => true,
                    'orderby' => 'title'
                )
        );
        //echo $tipo;
        //var_dump($users);
        echo '<div class="grid-articles">';
        //echo $size_art;
        if (!empty($get_articles)) {
            echo $tx_before;
            foreach ($get_articles as $art) {
                //var_dump($art);
                $featuredImageID = get_post_thumbnail_id($art->ID);
                //if($featuredImageID){ echo $featuredImageID; }else{ echo 'nulla'; };
                //echo '<br>'.$art->ID;
                //echo $is_article_url;
                echo '<div class="item_article">';
                //echo $art->ID.' - '.$size_art;
                if ($is_article_url == 'yes')
                    echo '<a href="' . get_permalink($art->ID) . '">';
                if ($featuredImageID) {
                    echo wp_get_attachment_image($featuredImageID, $size_art);
                } else {
                    echo '<img src="' . DCE_Helper::get_placeholder_image_src() . '" />';
                }

                echo '<div class="tit-art tx-el">' . get_the_title($art->ID) . '</div>';
                if ($is_article_url == 'yes')
                    echo '</a>';
                echo '</div>';
                //echo apply_filters( 'the_title', $media->post_title );
            }
        }
        echo '</div>';
        //return $get_attachments;
    }

    public function get_link_a($item, $user) {
        $urlToPage = '';
        $target = '';
        $openLink = '';
        if ($item['link_to_page']) {
            if ($item['link_to'] == 'other_url' && $item['meta_field_url']) {
                //$urlToPage = esc_url( get_field( $item['meta_field_url'] , $user->ID) ); //get_field($item['meta_field_url']);
                $urlToPage = $user->{$item['meta_field_url']};
                if (isset($item['meta_field_url_target_blank']) && $item['meta_field_url_target_blank']) {
                    $target = 'target="_blank"';
                }
            } else if ($item['link_to'] == 'user_page') {
                $urlToPage = get_author_posts_url($user->ID);
            } else if ($item['link_to'] == 'custom') {
                if (!empty($item['custom_link']['url'])) {
                    $urlToPage = esc_url($item['custom_link']['url']);
                } else {
                    $urlToPage = false;
                }
                $target = $item['custom_link']['is_external'] ? 'target="_blank"' : '';
            }
            if ($item['link_to_page'] == 'yes' && $urlToPage != '') {
                $openLink = '<a data-dnc="layout_position" href="' . $urlToPage . '" ' . $target . '>';
            }
        }
        return $openLink;
    }

}
